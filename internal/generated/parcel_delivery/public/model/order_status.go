//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type OrderStatus string

const (
	OrderStatus_New        OrderStatus = "new"
	OrderStatus_Accepted   OrderStatus = "accepted"
	OrderStatus_InProccess OrderStatus = "in_proccess"
	OrderStatus_Delivered  OrderStatus = "delivered"
	OrderStatus_Calcelled  OrderStatus = "calcelled"
)

func (e *OrderStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "new":
		*e = OrderStatus_New
	case "accepted":
		*e = OrderStatus_Accepted
	case "in_proccess":
		*e = OrderStatus_InProccess
	case "delivered":
		*e = OrderStatus_Delivered
	case "calcelled":
		*e = OrderStatus_Calcelled
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for OrderStatus enum")
	}

	return nil
}

func (e OrderStatus) String() string {
	return string(e)
}
