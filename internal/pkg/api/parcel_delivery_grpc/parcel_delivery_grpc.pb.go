// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: api/parcel_delivery.proto

package parcel_delivery_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParcelDeliveryClient is the client API for ParcelDelivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParcelDeliveryClient interface {
	// create an account
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// login
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// create an order
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// change order destination
	ChangeDestination(ctx context.Context, in *ChangeDestinationRequest, opts ...grpc.CallOption) (*ChengeDestinationResponse, error)
	// cancel an order
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// get order information
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// get list of orders
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
}

type parcelDeliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewParcelDeliveryClient(cc grpc.ClientConnInterface) ParcelDeliveryClient {
	return &parcelDeliveryClient{cc}
}

func (c *parcelDeliveryClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) ChangeDestination(ctx context.Context, in *ChangeDestinationRequest, opts ...grpc.CallOption) (*ChengeDestinationResponse, error) {
	out := new(ChengeDestinationResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/ChangeDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelDeliveryClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/parcel_delivery.ParcelDelivery/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParcelDeliveryServer is the server API for ParcelDelivery service.
// All implementations must embed UnimplementedParcelDeliveryServer
// for forward compatibility
type ParcelDeliveryServer interface {
	// create an account
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// login
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// create an order
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// change order destination
	ChangeDestination(context.Context, *ChangeDestinationRequest) (*ChengeDestinationResponse, error)
	// cancel an order
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// get order information
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// get list of orders
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	mustEmbedUnimplementedParcelDeliveryServer()
}

// UnimplementedParcelDeliveryServer must be embedded to have forward compatible implementations.
type UnimplementedParcelDeliveryServer struct {
}

func (UnimplementedParcelDeliveryServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedParcelDeliveryServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedParcelDeliveryServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedParcelDeliveryServer) ChangeDestination(context.Context, *ChangeDestinationRequest) (*ChengeDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDestination not implemented")
}
func (UnimplementedParcelDeliveryServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedParcelDeliveryServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedParcelDeliveryServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedParcelDeliveryServer) mustEmbedUnimplementedParcelDeliveryServer() {}

// UnsafeParcelDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParcelDeliveryServer will
// result in compilation errors.
type UnsafeParcelDeliveryServer interface {
	mustEmbedUnimplementedParcelDeliveryServer()
}

func RegisterParcelDeliveryServer(s grpc.ServiceRegistrar, srv ParcelDeliveryServer) {
	s.RegisterService(&ParcelDelivery_ServiceDesc, srv)
}

func _ParcelDelivery_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_ChangeDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).ChangeDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/ChangeDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).ChangeDestination(ctx, req.(*ChangeDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelDelivery_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelDeliveryServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel_delivery.ParcelDelivery/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelDeliveryServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParcelDelivery_ServiceDesc is the grpc.ServiceDesc for ParcelDelivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParcelDelivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parcel_delivery.ParcelDelivery",
	HandlerType: (*ParcelDeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _ParcelDelivery_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _ParcelDelivery_SignIn_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ParcelDelivery_CreateOrder_Handler,
		},
		{
			MethodName: "ChangeDestination",
			Handler:    _ParcelDelivery_ChangeDestination_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _ParcelDelivery_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ParcelDelivery_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _ParcelDelivery_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/parcel_delivery.proto",
}
